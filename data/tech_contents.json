{
    "system-design":{
        "Scalability": "https://blog.algomaster.io/p/scalability",
        "Availability": "https://blog.algomaster.io/p/system-design-what-is-availability",
        "CAP Theorem": "https://blog.algomaster.io/p/cap-theorem-explained",
        "ACID Transactions": "https://blog.algomaster.io/p/what-are-acid-transactions-in-databases",
        "Consistent Hashing": "https://blog.algomaster.io/p/consistent-hashing-explained",
        "Rate Limiting": "https://blog.algomaster.io/p/rate-limiting-algorithms-explained-with-code",
        "SPOF": "https://blog.algomaster.io/p/system-design-how-to-avoid-single-point-of-failures",
        "Fault Tolerance": "https://www.cockroachlabs.com/blog/what-is-fault-tolerance/",
        "Consensus Algorithms": "https://medium.com/@sourabhatta1819/consensus-in-distributed-system-ac79f8ba2b8c",
        "Gossip Protocol": "http://highscalability.com/blog/2023/7/16/gossip-protocol-explained.html",
        "Service Discovery": "https://blog.algomaster.io/p/service-discovery-in-distributed-systems",
        "API Design": "https://abdulrwahab.medium.com/api-architecture-best-practices-for-designing-rest-apis-bf907025f5f",
        "Disaster Recovery": "https://cloud.google.com/learn/what-is-disaster-recovery",
        "Distributed Tracing": "https://www.dynatrace.com/news/blog/what-is-distributed-tracing/",
        "APIs": "https://blog.algomaster.io/p/whats-an-api",
        "Content Delivery Network (CDN)": "https://blog.algomaster.io/p/content-delivery-networks",
        "Proxy vs Reverse Proxy": "https://blog.algomaster.io/p/proxy-vs-reverse-proxy-explained",
        "Domain Name System (DNS)": "https://www.cloudflare.com/learning/dns/what-is-dns/",
        "Caching": "https://blog.algomaster.io/p/4d7d6f8a-6803-4c7b-85ca-864c87c2cbf2",
        "Caching Strategies": "https://blog.algomaster.io/p/top-5-caching-strategies-explained",
        "Distributed Caching": "https://blog.algomaster.io/p/distributed-caching",
        "API Gateway": "https://blog.algomaster.io/p/what-is-an-api-gateway",
        "Load Balancing": "https://blog.algomaster.io/p/load-balancing-algorithms-explained-with-code",
        "Databases Types": "https://blog.algomaster.io/p/15-types-of-databases",
        "SQL vs NoSQL": "https://blog.algomaster.io/p/sql-vs-nosql-7-key-differences",
        "Database Indexes": "https://blog.algomaster.io/p/a-detailed-guide-on-database-indexes",
        "Consistency Patterns": "https://systemdesign.one/consistency-patterns/",
        "HeartBeats": "https://blog.algomaster.io/p/heartbeats-in-distributed-systems",
        "Circuit Breaker": "https://medium.com/geekculture/design-patterns-for-microservices-circuit-breaker-pattern-276249ffab33",
        "Idempotency": "https://blog.algomaster.io/p/idempotency-in-distributed-systems",
        "Database Scaling": "https://blog.algomaster.io/p/system-design-how-to-scale-a-database",
        "Data Replication": "https://redis.com/blog/what-is-data-replication/",
        "Data Redundancy": "https://blog.algomaster.io/p/489440f1-9c80-4241-9ec8-de156964c3b9",
        "Database Sharding": "https://blog.algomaster.io/p/what-is-database-sharding",
        "Database Architectures": "https://www.mongodb.com/developer/products/mongodb/active-active-application-architectures/",
        "Failover": "https://www.druva.com/glossary/what-is-a-failover-definition-and-related-faqs",
        "Bloom Filters": "https://blog.algomaster.io/p/bloom-filters",
        "Message Queues": "https://blog.algomaster.io/p/message-queues",
        "WebSockets": "https://blog.algomaster.io/p/websockets",
        "Checksums": "https://blog.algomaster.io/p/what-are-checksums",
        "Microservices Guidelines": "https://newsletter.systemdesign.one/p/netflix-microservices",
        "Distributed Locking": "https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html",
        "Top 15 Tradeoffs": "https://blog.algomaster.io/p/system-design-top-15-trade-offs",
        "Vertical vs Horizontal Scaling": "https://blog.algomaster.io/p/system-design-vertical-vs-horizontal-scaling",
        "Concurrency vs Parallelism": "https://blog.algomaster.io/p/concurrency-vs-parallelism",
        "Long Polling vs WebSockets": "https://blog.algomaster.io/p/long-polling-vs-websockets",
        "Batch vs Stream Processing": "https://blog.algomaster.io/p/batch-processing-vs-stream-processing",
        "Stateful vs Stateless Design": "https://blog.algomaster.io/p/741dff8e-10ea-413e-8dd2-be57434917d2",
        "Strong vs Eventual Consistency": "https://blog.algomaster.io/p/7d9da525-fe25-4e16-94e8-8056e7c57934",
        "Read-Through vs Write-Through Cache": "https://blog.algomaster.io/p/59cae60d-9717-4e20-a59e-759e370db4e5",
        "Push vs Pull Architecture": "https://blog.algomaster.io/p/af5fe2fe-9a4f-4708-af43-184945a243af",
        "REST vs RPC": "https://blog.algomaster.io/p/106604fb-b746-41de-88fb-60e932b2ff68",
        "Synchronous vs. asynchronous communications": "https://blog.algomaster.io/p/aec1cebf-6060-45a7-8e00-47364ca70761",
        "Latency vs Throughput": "https://aws.amazon.com/compare/the-difference-between-throughput-and-latency/",
        "Client-Server Architecture": "https://blog.algomaster.io/p/4585cf8e-30a4-4295-936f-308a25cb716c",
        "Microservices Architecture": "https://medium.com/hashmapinc/the-what-why-and-how-of-a-microservices-architecture-4179579423a9",
        "Serverless Architecture": "https://blog.algomaster.io/p/2edeb23b-cfa5-4b24-845e-3f6f7a39d162",
        "Event-Driven Architecture": "https://www.confluent.io/learn/event-driven-architecture/",
        "Peer-to-Peer (P2P) Architecture": "https://www.spiceworks.com/tech/networking/articles/what-is-peer-to-peer/",
        "Read the Full Article": "https://blog.algomaster.io/p/how-to-answer-a-system-design-interview-problem",
        "Design URL Shortener like TinyURL": "https://blog.algomaster.io/p/design-a-url-shortener",
        "Design Text Storage Service like Pastebin": "https://www.youtube.com/watch?v=josjRSBqEBI",
        "Design Leaderboard": "https://systemdesign.one/leaderboard-system-design/",
        "Design Content Delivery Network (CDN)": "https://www.youtube.com/watch?v=8zX0rue2Hic",
        "Design Parking Garage": "https://www.youtube.com/watch?v=NtMvNh0WFVM",
        "Design Vending Machine": "https://www.youtube.com/watch?v=D0kDMUgo27c",
        "Design Distributed Key-Value Store": "https://www.youtube.com/watch?v=rnZmdmlR-2M",
        "Design Distributed Cache": "https://www.youtube.com/watch?v=iuqZvajTOyA",
        "Design Authentication System": "https://www.youtube.com/watch?v=uj_4vxm9u90",
        "Design Unified Payments Interface (UPI)": "https://www.youtube.com/watch?v=QpLy0_c_RXk",
        "Design WhatsApp": "https://blog.algomaster.io/p/design-a-chat-application-like-whatsapp",
        "Design Spotify": "https://blog.algomaster.io/p/design-spotify-system-design-interview",
        "Design Distributed Job Scheduler": "https://blog.algomaster.io/p/design-a-distributed-job-scheduler",
        "Design a Scalable Notification Service": "https://blog.algomaster.io/p/design-a-scalable-notification-service",
        "Design Instagram": "https://www.youtube.com/watch?v=VJpfO6KdyWE",
        "Design Tinder": "https://www.youtube.com/watch?v=tndzLznxq40",
        "Design Facebook": "https://www.youtube.com/watch?v=9-hjBGxuiEs",
        "Design Twitter": "https://www.youtube.com/watch?v=wYk0xPP_P_8",
        "Design Reddit": "https://www.youtube.com/watch?v=KYExYE_9nIY",
        "Design Netflix": "https://www.youtube.com/watch?v=psQzyFfsUGU",
        "Design Youtube": "https://www.youtube.com/watch?v=jPKTo1iGQiE",
        "Design Google Search": "https://www.youtube.com/watch?v=CeGtqouT8eA",
        "Design E-commerce Store like Amazon": "https://www.youtube.com/watch?v=EpASu_1dUdE",
        "Design TikTok": "https://www.youtube.com/watch?v=Z-0g_aJL5Fw",
        "Design Shopify": "https://www.youtube.com/watch?v=lEL4F_0J3l8",
        "Design Airbnb": "https://www.youtube.com/watch?v=YyOXt2MEkv4",
        "Design Autocomplete for Search Engines": "https://www.youtube.com/watch?v=us0qySiUsGU",
        "Design Rate Limiter": "https://www.youtube.com/watch?v=mhUQe4BKZXs",
        "Design Distributed Message Queue like Kafka": "https://www.youtube.com/watch?v=iJLL-KPqBpM",
        "Design Flight Booking System": "https://www.youtube.com/watch?v=qsGcfVGvFSs",
        "Design Online Code Editor": "https://www.youtube.com/watch?v=07jkn4jUtso",
        "Design Stock Exchange System": "https://www.youtube.com/watch?v=dUMWMZmMsVE",
        "Design an Analytics Platform (Metrics & Logging)": "https://www.youtube.com/watch?v=kIcq1_pBQSY",
        "Design Payment System": "https://www.youtube.com/watch?v=olfaBgJrUBI",
        "Design a Digital Wallet": "https://www.youtube.com/watch?v=4ijjIUeq6hE",
        "Design Location Based Service like Yelp": "https://www.youtube.com/watch?v=M4lR_Va97cQ",
        "Design Uber": "https://www.youtube.com/watch?v=umWABit-wbk",
        "Design Food Delivery App like Doordash": "https://www.youtube.com/watch?v=iRhSAR3ldTw",
        "Design Google Docs": "https://www.youtube.com/watch?v=2auwirNBvGg",
        "Design Google Maps": "https://www.youtube.com/watch?v=jk3yvVfNvds",
        "Design Zoom": "https://www.youtube.com/watch?v=G32ThJakeHk",
        "Design Distributed Counter": "https://systemdesign.one/distributed-counter-system-design/",
        "Design File Sharing System like Dropbox": "https://www.youtube.com/watch?v=U0xTu6E2CT8",
        "Design Ticket Booking System like BookMyShow": "https://www.youtube.com/watch?v=lBAwJgoO3Ek",
        "Design Distributed Web Crawler": "https://www.youtube.com/watch?v=BKZxZwUgL3Y",
        "Design Code Deployment System": "https://www.youtube.com/watch?v=q0KGYwNbf-0",
        "Design Distributed Cloud Storage like S3": "https://www.youtube.com/watch?v=UmWtcgC96X8",
        "Design Distributed Locking Service": "https://www.youtube.com/watch?v=v7x75aN9liM",
        "Design Slack": "https://systemdesign.one/slack-architecture/",
        "Design Live Comments": "https://systemdesign.one/live-comment-system-design/",
        "Designing Data-Intensive Applications": "https://www.amazon.in/dp/9352135245",
        "How Discord stores trillions of messages": "https://discord.com/blog/how-discord-stores-trillions-of-messages",
        "Building In-Video Search at Netflix": "https://netflixtechblog.com/building-in-video-search-936766f0017c",
        "How Canva scaled Media uploads from Zero to 50 Million per Day": "https://www.canva.dev/blog/engineering/from-zero-to-50-million-uploads-per-day-scaling-media-at-canva/",
        "How Airbnb avoids double payments in a Distributed Payments System": "https://medium.com/airbnb-engineering/avoiding-double-payments-in-a-distributed-payments-system-2981f6b070bb",
        "Stripe's payments APIs - The first 10 years": "https://stripe.com/blog/payment-api-design",
        "Real time messaging at Slack": "https://slack.engineering/real-time-messaging/",
        "Paxos: The Part-Time Parliament": "https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf",
        "MapReduce: Simplified Data Processing on Large Clusters": "https://research.google.com/archive/mapreduce-osdi04.pdf",
        "The Google File System": "https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf",
        "Dynamo: Amazon's Highly Available Key-value Store": "https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf",
        "Kafka: a Distributed Messaging System for Log Processing": "https://notes.stephenholiday.com/Kafka.pdf",
        "Spanner: Google's Globally-Distributed Database": "https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf",
        "Bigtable: A Distributed Storage System for Structured Data": "https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf",        
        "ZooKeeper: Wait-free coordination for Internet-scale systems": "https://www.usenix.org/legacy/event/usenix10/tech/full_papers/Hunt.pdf",
        "The Log-Structured Merge-Tree (LSM-Tree)": "https://www.cs.umb.edu/~poneil/lsmtree.pdf",
        "The Chubby lock service for loosely-coupled distributed systems": "https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf",
        "How Notion Handles 200 Billion Notes": "https://youtu.be/NwZ26lxl8wU?si=FUH-Vdtqhd8Fjtqy",
        "Building and scaling Notion’s data lake": "https://www.notion.com/blog/building-and-scaling-notions-data-lake",
        "The Great Re-shard: adding Postgres capacity (again) with zero downtime":"https://www.notion.com/blog/the-great-re-shard",
        "Herding elephants: Lessons learned from sharding Postgres at Notion": "https://www.notion.com/blog/sharding-postgres-at-notion",
        "The data model behind Notion's flexibility": "https://www.notion.com/blog/data-model-behind-notion"
    },
    "low-level-design":{
        "Design a Parking Lot ": "https://codemia.io/object-oriented-design/design-a-parking-lot/solutions/sj1jx5/My-Solution-for-Design-a-Parking-Lot-with-Score-910",
        "Design a Resource Management System": "https://codemia.io/object-oriented-design/design-a-resource-management-system/solutions/sj1nbp/My-Solution-for-Design-a-Resource-Management-System-with-Score-910",
        "Design a Warehouse Management System": "https://codemia.io/object-oriented-design/design-a-warehouse-management-system/solutions/sjk5nt/My-Solution-for-Design-a-Warehouse-Management-System-with-Score-910",
        "Design a File Sharing Platform": "https://codemia.io/object-oriented-design/design-a-file-sharing-platform/solutions/sjk3nr/My-Solution-for-Design-a-File-Sharing-Platform-with-Score-910",
        "LLD page at AlgoMaster.io": "https://algomaster.io/learn/lld",
        "Basics OOP Concepts": "https://blog.algomaster.io/p/basic-oop-concepts-explained-with-code",
        "SOLID Principles with Pictures": "https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898",
        "SOLID Principles with Code": "https://blog.algomaster.io/p/solid-principles-explained-with-code",
        "DRY Principle": "https://blog.algomaster.io/p/082450d8-0e7b-4447-a8dc-b7308e45f048",
        "YAGNI Principle": "https://blog.algomaster.io/p/8c3c7da7-885b-4a9c-a6e4-70ee02de4772",
        "KISS Principle": "https://blog.algomaster.io/p/21b57678-b351-4ed4-b390-3b6308af2f7d",
        "Singleton": "https://blog.algomaster.io/p/singleton-design-pattern",
        "Adapter": "https://refactoring.guru/design-patterns/adapter",
        "Iterator": "https://refactoring.guru/design-patterns/iterator",
        "Factory Method": "https://refactoring.guru/design-patterns/factory-method",
        "Bridge": "https://refactoring.guru/design-patterns/bridge",
        "Observer": "https://refactoring.guru/design-patterns/observer",
        "Abstract Factory": "https://refactoring.guru/design-patterns/abstract-factory",
        "Composite": "https://refactoring.guru/design-patterns/composite",
        "Strategy": "https://refactoring.guru/design-patterns/strategy",
        "Builder": "https://refactoring.guru/design-patterns/builder",
        "Decorator": "https://refactoring.guru/design-patterns/decorator",
        "Command": "https://refactoring.guru/design-patterns/command",
        "Prototype": "https://refactoring.guru/design-patterns/prototype",
        "Facade": "https://refactoring.guru/design-patterns/facade",
        "State": "https://refactoring.guru/design-patterns/state",
        "Flyweight": "https://refactoring.guru/design-patterns/flyweight",
        "Template Method": "https://refactoring.guru/design-patterns/template-method",
        "Proxy": "https://refactoring.guru/design-patterns/proxy",
        "Visitor": "https://refactoring.guru/design-patterns/visitor",
        "Mediator": "https://refactoring.guru/design-patterns/mediator",
        "Memento": "https://refactoring.guru/design-patterns/memento",
        "Chain of Responsibility": "https://refactoring.guru/design-patterns/chain-of-responsibility",
        "Class Diagram": "https://blog.algomaster.io/p/uml-class-diagram-explained-with-examples",
        "Use Case Diagram": "https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-use-case-diagram/",
        "Sequence Diagram": "https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-sequence-diagram/",
        "Activity Diagram": "https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-activity-diagram/",
        "State Machine Diagram": "https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-state-machine-diagram/",
        "How to Answer a LLD Interview Problem": "https://blog.algomaster.io/p/how-to-answer-a-lld-interview-problem",
        "Design Parking Lot": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/parking-lot.md",
        "Design Stack Overflow": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/stack-overflow.md",
        "Design a Vending Machine": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/vending-machine.md",
        "Design Logging Framework": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/logging-framework.md",
        "Design Traffic Signal Control System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/traffic-signal.md",
        "Design Coffee Vending Machine": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/coffee-vending-machine.md",
        "Design a Task Management System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/task-management-system.md",
        "Design ATM": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/atm.md",
        "Design LinkedIn": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/linkedin.md",
        "Design LRU Cache": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/lru-cache.md",
        "Design Tic Tac Toe Game": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/tic-tac-toe.md",
        "Design Pub Sub System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/pub-sub-system.md",
        "Design an Elevator System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/elevator-system.md",
        "Design Car Rental System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/car-rental-system.md",
        "Design an Online Auction System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/online-auction-system.md",
        "Design Hotel Management System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/hotel-management-system.md",
        "Design a Digital Wallet Service": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/digital-wallet-service.md",
        "Design Airline Management System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/airline-management-system.md",
        "Design a Library Management System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/library-management-system.md",
        "Design a Social Network like Facebook": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/social-networking-service.md",
        "Design Restaurant Management System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/restaurant-management-system.md",
        "Design a Concert Ticket Booking System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/concert-ticket-booking-system.md",
        "Design CricInfo": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/cricinfo.md",
        "Design Splitwise": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/splitwise.md",
        "Design Chess Game": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/chess-game.md",
        "Design a Snake and Ladder game": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/snake-and-ladder.md",
        "Design Ride-Sharing Service like Uber": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/ride-sharing-service.md",
        "Design Course Registration System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/course-registration-system.md",
        "Design Movie Ticket Booking System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/movie-ticket-booking-system.md",
        "Design Online Shopping System like Amazon": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/online-shopping-service.md",
        "Design Online Stock Brokerage System": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/online-stock-brokerage-system.md",
        "Design Music Streaming Service like Spotify": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/music-streaming-service.md",
        "Design Online Food Delivery Service like Swiggy": "https://github.com/ashishps1/awesome-low-level-design/blob/main/problems/food-delivery-service.md"
    },
    "test-engineering":{
        "Read a content of your choice from Software Testing Help":"https://www.softwaretestinghelp.com/",
        "Decoding (REST)APIs for Product Managers": "https://uxdesign.cc/decoding-apis-in-simple-terms-for-product-managers-e93723a6e589",
        "API Test Automation with REST-assured": "https://techblog.dotdash.com/api-test-automation-with-rest-assured-df3a24a827e2",
        "How to use patterns mediator and dataprovider with REST Assured.": "https://itnext.io/how-to-use-patterns-mediator-and-dataprovider-with-rest-assured-d430ffcfb137",
        "Are we performance testing the right way?": "https://roshnithomas.medium.com/are-we-performance-testing-the-right-way-51a56805a3b0",
        "Client-Side Performance Testing": "https://dzone.com/articles/client-side-performance-testing",
        "Test Pyramid": "https://martinfowler.com/bliki/TestPyramid.html",
        "Where to trigger E2E test suite in microservice land?": "https://club.ministryoftesting.com/t/where-to-trigger-e2e-test-suite-in-microservice-land/47631/11",
        "Testing Strategies in a Microservice Architecture": "https://martinfowler.com/articles/microservice-testing/",
        "The Practical Test Pyramid": "https://martinfowler.com/articles/practical-test-pyramid.html",
        "How to create an effective test automation strategy": "https://abstarreveld.medium.com/considerations-for-an-effective-test-automation-strategy-a5bd027b3fa3",
        "Just Say No to More End-to-End Tests": "https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html",
        "Redefining test automation": "https://www.youtube.com/watch?v=uIDvGzQdoxc&ab_channel=SeleniumConference",
        "Readable. Stable. Maintainable. E2E Testing @ Facebook": "https://www.youtube.com/watch?v=diYgXpktTqo&ab_channel=SeleniumConference",
        "Exploratory Testing": "https://martinfowler.com/bliki/ExploratoryTesting.html",
        "Exploratory Testing 2.0": "https://www.satisfice.com/exploratory-testing",
        "Exploratory Testing 3.0": "https://www.satisfice.com/blog/archives/1509",
        "Testing in Production, the safe way": "https://copyconstruct.medium.com/testing-in-production-the-safe-way-18ca102d0ef1",
        "Testing Strategy for DevOps: What to Test and When": "https://www.youtube.com/watch?v=z-3aSVfoyBY&ab_channel=ModernSoftwareEngineering",
        "Fault Injection in Production": "https://queue.acm.org/detail.cfm?id=2353017",
        "Optimizing CI/CD Processes with Selective Testing": "https://medium.com/agoda-engineering/optimizing-ci-cd-processes-with-selective-testing-f537f9abc9d3",
        "Read a content of your choice from Google Testing Blog": "https://testing.googleblog.com/",
        "Optimizing Test Case Management for Large-Scale Projects": "https://www.testmonitor.com/blog/optimizing-test-case-management-for-large-scale-projects",
        "Read a testing content of your choice from Amazong Productivity Blog": "https://aws.amazon.com/blogs/devops/tag/testing/",
        "The future of quality assurance: Shift-left testing with QyrusAI and Amazon Bedrock": "https://aws.amazon.com/blogs/machine-learning/the-future-of-quality-assurance-shift-left-testing-with-qyrusai-and-amazon-bedrock/",
        "Read a testing content of your choice from AWS Developer Tool Blog": "https://aws.amazon.com/blogs/developer/tag/testing/",
        "How we test new products": "https://www.meta.com/emerging-tech/testing-approach/?srsltid=AfmBOorI654igaeZAIE7Wvd-ts67BYUqIu8K1S4ol3_VL8c7cBcpn-KR",
        "Autonomous testing of services at scale": "https://engineering.fb.com/2021/10/20/developer-tools/autonomous-testing/",
        "Revolutionizing software testing: Introducing LLM-powered bug catchers": "https://engineering.fb.com/2025/02/05/security/revolutionizing-software-testing-llm-powered-bug-catchers-meta-ach/",
        "Scale E2E On-Device Testing with Meta Quest Scriptable Testing": "https://developers.meta.com/horizon/blog/scale-e2e-on-device-testing-with-meta-quest-scriptable-testing/",
        "Engineering practices @ Meta: #4 Engineers write automated tests, well mostly!": "https://automationhacks.medium.com/engineering-practices-meta-4-engineers-write-automated-tests-well-mostly-1d4597d8363",
        "Predictive Test Selection": "https://research.facebook.com/publications/predictive-test-selection/",
        "Choosing a Sequential Testing Framework — Comparisons and Discussions": "https://engineering.atspotify.com/2023/03/choosing-sequential-testing-framework-comparisons-and-discussions/",
        "Experiment like Spotify: A/B Tests and Rollouts": "https://confidence.spotify.com/blog/ab-tests-and-rollouts",
        "Load Testing for 2022 Wrapped": "https://engineering.atspotify.com/2023/03/load-testing-for-2022-wrapped/",
        "Experiment like Spotify: With Confidence": "https://confidence.spotify.com/blog/experiment-like-spotify",
        "Testing at scale @ Spotify": "https://qubika.com/blog/testing-at-scale/",
        "Experiments with Smaller Samples": "https://confidence.spotify.com/blog/smaller-sample-experiments",
        "How to Test a Music App like Spotify, YouTube Music etc.": "https://www.testbytes.net/blog/how-to-test-a-music-app-like-spotify/",
        "Sequential Tests": "https://confidence.spotify.com/docs/stats/sequential-tests",
        "Testing of Microservices": "https://engineering.atspotify.com/2018/01/testing-of-microservices/",
        "Experiment like Spotify: Feature Flags": "https://confidence.spotify.com/blog/feature-flags",
        "Read a testing content of your choice from Microsoft TestingSpot Blog": "https://techcommunity.microsoft.com/category/microsofttesting/blog/testingspotblog",
        "The testing lifecycle at LinkedIn": "https://www.linkedin.com/blog/engineering/archive/testing-lifecycle-linkedin",
        "Read an A/B testing and experimentation content from LinkedIn": "https://www.linkedin.com/blog/engineering/ab-testing-experimentation"
    },
    "behavioral":{
        "Cracking the Behavioral Interview for Software Developers": "https://youtu.be/ld0cvWnrVsU?si=xS4IJoUmgd1SCyG6",
        "Top 10 Behavioral Software Engineering Interview Questions": "https://youtu.be/T25I2FQ9Mok?si=6IdYbF_G4zgGnXIC",
        "Answering behavioral interview questions is shockingly uncomplicated": "https://youtu.be/WdyiUe7_3cA?si=fxPokzxtFmkrr5Xk",
        "Master Behavioral Interviews (for Software Engineers)": "https://youtu.be/8hpSMnCwCxY?si=DJtVIG_NS9bfzFcw",
        "Behavioral Googleyness and Leadership Interview Question and Answer": "https://youtu.be/ceBVswJldnI?si=3Wa0v-z-0tO5vzp8",
        "Prepare for Your Google Interview: Leadership": "https://youtu.be/2Cr3-et4xkI?si=HMs2yHMfRbXlyUg4",
        "Amazon Behavioral Interview Questions | Leadership Principles Explained": "https://youtu.be/6p1m2nCE7jE?si=tiuY_f0KLlRLxY7r",
        "STAR Method - How to Ace Your Amazon Interview": "https://youtu.be/UQrTMxouDUY?si=aajSgZO7HzPOKi1M",
        "FAANG Behavioral Interview Guide | Most Common Question Types | Right Way & Wrong Way to Answer!": "https://youtu.be/JZB2PGEXtg0?si=bgm0uk0g5-3TUth3",
        "Amazon Behavioral Interview Questions (+ answers, method)": "https://igotanoffer.com/blogs/tech/amazon-behavioral-interview",
        "The Interview — Decoding behavioral questions": "https://razvan-cirlugea.medium.com/the-interview-decoding-behavioral-questions-7c92660f5583",
        "Amazon Behavioral Interview Questions and Answers (2025 Guide)": "https://www.tryexponent.com/blog/how-to-nail-amazons-behavioral-interview-questions",
        "Google's Googleyness Interview": "https://prepfully.com/interview-guides/googles-googleyness-interview"
    }
}